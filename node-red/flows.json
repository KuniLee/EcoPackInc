[
    {
        "id": "d8f388f98592d062",
        "type": "tab",
        "label": "Инициализация",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e52c1301b78909b",
        "type": "tab",
        "label": "Modbus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8267d55bb8665c3",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc35f1f13fade75e",
        "type": "tab",
        "label": "SQL Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "df21a5b106a947a5",
        "type": "tab",
        "label": "Архивация",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e68559fb83a6c0a",
        "type": "tab",
        "label": "Смена/время",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8dd5dc2.87841",
        "type": "modbus-client",
        "name": "modbusTCPserver",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "localhost",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "",
        "commandDelay": 1,
        "clientTimeout": 500,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "608ff9c050d10945",
        "type": "MySQLdatabase",
        "name": "mysql-db",
        "port": "3306",
        "db": "DataBase",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f8eb90804d4934dd",
        "type": "websocket-listener",
        "path": "/ws/data",
        "wholemsg": "false"
    },
    {
        "id": "e0707ccdfb3f12e8",
        "type": "websocket-listener",
        "path": "/ws/time",
        "wholemsg": "false"
    },
    {
        "id": "6bd0068ce09f7195",
        "type": "inject",
        "z": "d8f388f98592d062",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "17ad62f06497aae8"
            ]
        ]
    },
    {
        "id": "17ad62f06497aae8",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Инициализация Global",
        "func": "global.get('MODBUS_TCP_IP', 'file') || global.set('MODBUS_TCP_IP', '127.0.0.1', 'file')\nglobal.get('ATTEMPTS', 'file') || global.set('ATTEMPTS', 3, 'file')\nglobal.get('ERROR_TIME', 'file') || global.set('ERROR_TIME', 10000, 'file')\nglobal.get('STAGE_TIME', 'file') || global.set('STAGE_TIME', ['09:00','21:00','A'], 'file')\nglobal.get('stageProduction', 'file') || global.set('stageProduction', {}, 'file')\nglobal.get('settingsPagePassword', 'file') || global.set('settingsPagePassword', 'eco', 'file')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "f1a39dbdacbb6d43",
        "type": "mysql",
        "z": "d8f388f98592d062",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 840,
        "y": 260,
        "wires": [
            [
                "0ebd02be01c41393"
            ]
        ]
    },
    {
        "id": "0ebd02be01c41393",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Преобразование ответа",
        "func": "for (const device of msg.payload) {\n    device.IsRequested = !!device.IsRequested.readInt8(0)\n}\nglobal.set('devices', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ef35339b1f3e7897",
        "type": "comment",
        "z": "d8f388f98592d062",
        "name": "Получение всех устройств из БД",
        "info": "",
        "x": 240,
        "y": 200,
        "wires": []
    },
    {
        "id": "231fb27999873a06",
        "type": "link in",
        "z": "d8f388f98592d062",
        "name": "init devices",
        "links": [
            "3b36fa04cce40f0c"
        ],
        "x": 305,
        "y": 340,
        "wires": [
            [
                "d43fee0fedd81d84"
            ]
        ]
    },
    {
        "id": "d43fee0fedd81d84",
        "type": "change",
        "z": "d8f388f98592d062",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM ModbusCounters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "f1a39dbdacbb6d43"
            ]
        ]
    },
    {
        "id": "1bf80087749d8199",
        "type": "status",
        "z": "d8f388f98592d062",
        "name": "",
        "scope": [
            "f1a39dbdacbb6d43"
        ],
        "x": 160,
        "y": 260,
        "wires": [
            [
                "f846483f495661d8"
            ]
        ]
    },
    {
        "id": "f846483f495661d8",
        "type": "switch",
        "z": "d8f388f98592d062",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 260,
        "wires": [
            [
                "d43fee0fedd81d84",
                "c4b7301bcd14a36f"
            ]
        ]
    },
    {
        "id": "7e866656b47d0f09",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Установить смену",
        "func": "const stagesCycle = global.get('stages')\nconst [time1,time2,stage] = global.get('STAGE_TIME', 'file')\n\nconst currentD = new Date();\nvar startDayStage = new Date();\n// @ts-ignore\nstartDayStage.setHours(...time1.split(':'), 0);\nvar endDayStage = new Date();\n// @ts-ignore\nendDayStage.setHours(...time2.split(':'), 0);\n\nconst isDay = currentD >= startDayStage && currentD < endDayStage\n\nstagesCycle.setStage(stage, isDay)\n\n\n// установка времени следующей смены\nconst nextStageIn = global.get('nextStageIn', 'file')\nif (nextStageIn) {\n    if (new Date(nextStageIn) <= new Date()) {\n        global.set('stageProduction', {}, 'file')\n        global.set('nextStageIn', stagesCycle.getStageEndTime(), 'file')\n    }\n} else global.set('nextStageIn', stagesCycle.getStageEndTime(), 'file')\n\n\nmsg.url = 'http://127.0.0.1:1880/flow/7e68559fb83a6c0a'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\n\nclass StageCycle {\n    #stages = ['A','B','C','A','D','C','B','D']\n    current = 0\n\n    setStage(stage, isDay){\n        this.current = this.#stages.findIndex((el, idx) => el === stage && idx % 2 !== (+isDay) )\n        this.setGlobal()\n    }\n\n    setGlobal(){\n        const stageTime = global.get('STAGE_TIME', 'file')\n        stageTime[2] = this.getStage()\n        global.set('STAGE_TIME', stageTime, 'file')\n    }\n    \n    getStage(){\n        return this.#stages[this.current]\n    }\n\n    nextStage() {\n        if (this.current < this.#stages.length - 1)\n        this.current++\n        else this.current = 0\n        this.setGlobal()\n    }\n\n    getStageEndTime(){\n    const [startDay, startNight] = global.get('STAGE_TIME', 'file')\n    const currentD = new Date();\n\n    const startStageTime = this.current % 2 === 0 ? startNight : startDay\n\n    // @ts-ignore\n    currentD.setHours(...startStageTime.split(':'), 0)\n\n        if (new Date() >= currentD) currentD.setDate(currentD.getDate() + 1);\n    \n    return currentD.getTime();\n    }\n}\n\nglobal.set('stages', new StageCycle())",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 440,
        "wires": [
            [
                "5e37b3f337a3789e"
            ]
        ]
    },
    {
        "id": "54b5bf7510091755",
        "type": "link in",
        "z": "d8f388f98592d062",
        "name": "link in 1",
        "links": [
            "a2fa98132ae64af3"
        ],
        "x": 235,
        "y": 480,
        "wires": [
            [
                "7e866656b47d0f09"
            ]
        ]
    },
    {
        "id": "5e37b3f337a3789e",
        "type": "http request",
        "z": "d8f388f98592d062",
        "name": "Load flow",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "4d39a8deca8e861a"
            ]
        ]
    },
    {
        "id": "4d39a8deca8e861a",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Изменить время смены смен",
        "func": "const [time1, time2, stage] = global.get('STAGE_TIME', 'file')\n\nconst firstTimer = msg.payload.nodes.find(({ id }) => id ===\"2f1560f4455dfc50\")\nconst secondTimer = msg.payload.nodes.find(({ id }) => id === \"42586db8ab6bdb7a\")\n\nconst newTime1 = time1.split(':').reverse().join(' ') + ' * * *'\nconst newTime2 = time2.split(':').reverse().join(' ') + ' * * *'\n\nif (firstTimer.crontab !== newTime1 || secondTimer.crontab !== newTime2){\n    firstTimer.crontab = newTime1\n    secondTimer.crontab = newTime2\n\n    msg.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n    msg.method = \"PUT\";\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "fa9fb9c320845a13"
            ]
        ]
    },
    {
        "id": "fa9fb9c320845a13",
        "type": "http request",
        "z": "d8f388f98592d062",
        "name": "Save flow",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1220,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c921e35b28eb862f",
        "type": "inject",
        "z": "d8f388f98592d062",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 440,
        "wires": [
            [
                "7e866656b47d0f09"
            ]
        ]
    },
    {
        "id": "c4b7301bcd14a36f",
        "type": "link out",
        "z": "d8f388f98592d062",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "15dfe187e0651e45"
        ],
        "x": 625,
        "y": 340,
        "wires": []
    },
    {
        "id": "5c7d0c636d0abba8",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Поменять местами байты",
        "func": "const values = global.get('values')\nconst stageProd = global.get('stageProduction', 'file')\n\nconst { modbusRequest: { unitid } } = msg\n\nconst buf = msg.payload.buffer.reverse()\n\nfor (let i = 0; i < buf.length; i=i+2) {\n    [buf[i], buf[i + 1]] = [buf[i+1], buf[i]];\n}\n\nconst newValue = buf.readInt32BE(0)\n\nif (values.hasOwnProperty(unitid)) \n    values[unitid].value = buf.readInt32BE(0)\nelse\nvalues[unitid] = {\n        value: newValue,\n    }\n\nif (!(unitid in stageProd)) {\n    stageProd[unitid] = newValue\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "301faa842db8fef8",
        "type": "modbus-flex-sequencer",
        "z": "6e52c1301b78909b",
        "name": "",
        "sequences": [
            {
                "name": "Counter",
                "unitid": "1",
                "fc": "FC4",
                "address": "1003",
                "quantity": "2"
            }
        ],
        "server": "b8dd5dc2.87841",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 560,
        "y": 300,
        "wires": [
            [
                "7ae2a0fe2e84abcf"
            ],
            [
                "5c7d0c636d0abba8"
            ]
        ]
    },
    {
        "id": "c7f2674f6378e416",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1.1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "fb09af9ead3704ba"
            ]
        ]
    },
    {
        "id": "fb09af9ead3704ba",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 1",
        "func": "const devices = global.get('devices') || []\n\nconst skipedDevs = global.get('skipedDevs')\n\n\nconst requestedDevs = devices.filter(({ IsRequested, ModbusID }) => IsRequested && !skipedDevs.has(ModbusID))\n\nmsg.sequences = requestedDevs.map(el=>({\n    name: el.Name,\n    fc: 4,\n    address: el.ValueRegAdr,\n    unitid: el.ModbusID,\n    quantity: 2,    \n}))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "301faa842db8fef8"
            ]
        ]
    },
    {
        "id": "accc94a8e437d04e",
        "type": "modbus-flex-connector",
        "z": "6e52c1301b78909b",
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "b8dd5dc2.87841",
        "x": 750,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cd9b0f3aa0616ee9",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "2fb2560dc6144677",
                "0f6c5a1036729372"
            ]
        ]
    },
    {
        "id": "2fb2560dc6144677",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Конфиг Модбас",
        "func": "msg.payload = {\n    connectorType: \"TCP\",\n    tcpHost: global.get('MODBUS_TCP_IP', 'file'),\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 80,
        "wires": [
            [
                "accc94a8e437d04e"
            ]
        ]
    },
    {
        "id": "3ff5677b1c510bec",
        "type": "catch",
        "z": "6e52c1301b78909b",
        "name": "Ошибки Modbus",
        "scope": [
            "301faa842db8fef8"
        ],
        "uncaught": false,
        "x": 540,
        "y": 360,
        "wires": [
            [
                "1d5aad3c74b2c0d4"
            ]
        ]
    },
    {
        "id": "1d5aad3c74b2c0d4",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 2",
        "func": "const errCtr = flow.get('errorsCounter')\n\nconst errId = msg.payload.unitid\n\nconst now = Date.now()\n\n\nif (errCtr[errId] && now - errCtr[errId].lastTime < global.get('ERROR_TIME', 'file')){\n    errCtr[errId].counter++\n    errCtr[errId].lastTime = Date.now()\n} else errCtr[errId] = { counter: 1, lastTime: now }\n\n\nif (errCtr[errId].counter >= global.get('ATTEMPTS', 'file')) {\n    const skipedDevs = global.get('skipedDevs')\n    skipedDevs.add(errId)\n    delete errCtr[errId]\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "0f6c5a1036729372",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Инициализация контекста",
        "func": "flow.set('errorsCounter', {})\nglobal.set('skipedDevs', new Set())\nglobal.set('values', {})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "6e138e93f1fec0cb",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "71976d13f1ada451"
            ]
        ]
    },
    {
        "id": "71976d13f1ada451",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 3",
        "func": "const devices = global.get('devices') || []\nconst skipedDevs = global.get('skipedDevs')\nconst values = global.get('values')\nconst stageProd = global.get('stageProduction', 'file') || {}\n\nconst package = []\n\n\ndevices.forEach(( el )=>{\n\n    const id = el.ModbusID\n    const title = el.Name\n    const screen = el.Screen\n    const plan = el.StagePlan\n    let value = null\n    let performance = null\n    let production = null\n\n    if (id in values){\n        value = values[id]?.value\n        performance = values[id]?.performance\n\n        if (id in stageProd) {\n            const onStageStart = stageProd[id]\n            production = value >= onStageStart ? value - onStageStart : value + 999999 - onStageStart\n        }\n    }\n\n    if (!screen) return\n\n    let status = 'ok'\n\n    if (!el.IsRequested) status = 'disabled'\n    else if (skipedDevs.has(id)) status = 'error'\n\n    package.push({ id, title, screen, status, value, plan, production, performance})   \n\n});\n\nmsg.payload = package\n\nif (package.length) return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "f1a1f104ea0bff18",
                "8f07da727d98e78b"
            ]
        ]
    },
    {
        "id": "61aced3fbb77aa02",
        "type": "link in",
        "z": "6e52c1301b78909b",
        "name": "Переподключение Modbus",
        "links": [
            "22e0cbeb7a386cfd"
        ],
        "x": 145,
        "y": 140,
        "wires": [
            [
                "2fb2560dc6144677",
                "0f6c5a1036729372"
            ]
        ]
    },
    {
        "id": "e96e8e87cbf56bbc",
        "type": "comment",
        "z": "6e52c1301b78909b",
        "name": "Переодическая отправка значений в websocket",
        "info": "",
        "x": 240,
        "y": 740,
        "wires": []
    },
    {
        "id": "ab2419fd7a78f6c8",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "30",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "86951c9a7ca3c52a"
            ]
        ]
    },
    {
        "id": "d794e96c01b3f0d4",
        "type": "modbus-flex-sequencer",
        "z": "6e52c1301b78909b",
        "name": "",
        "sequences": [
            {
                "name": "Counter",
                "unitid": "1",
                "fc": "FC4",
                "address": "1001",
                "quantity": "2"
            }
        ],
        "server": "b8dd5dc2.87841",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 700,
        "y": 460,
        "wires": [
            [],
            [
                "16d165b0639e9cb8"
            ]
        ]
    },
    {
        "id": "86951c9a7ca3c52a",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Попытка опроса отключённых",
        "func": "const devices = global.get('devices') || []\n\nconst skipedDevs = global.get('skipedDevs')\n\n\nmsg.sequences = Array.from(skipedDevs).reduce((acc, el)=>{\n    const dev = devices.find(dev => dev.ModbusID == el)\n\n    if (dev === undefined || !dev.IsRequested) {\n        skipedDevs.delete(el)\n        return acc\n    }\n\n    if (dev.IsRequested) return [...acc, {\n        name: dev.Name,\n        fc: 4,\n        address: dev.ValueRegAdr,\n        unitid: dev.ModbusID,\n        quantity: 2,\n    }]\n\n},[])\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "d794e96c01b3f0d4"
            ]
        ]
    },
    {
        "id": "16d165b0639e9cb8",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Исключить из пропущенных",
        "func": "global.get('skipedDevs').delete(+msg.unitId)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "f1a1f104ea0bff18",
        "type": "websocket out",
        "z": "6e52c1301b78909b",
        "name": "",
        "server": "f8eb90804d4934dd",
        "client": "",
        "x": 910,
        "y": 780,
        "wires": []
    },
    {
        "id": "8f07da727d98e78b",
        "type": "debug",
        "z": "6e52c1301b78909b",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "94d85c1867fab69f",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "1.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "92746cdeb1b34e60"
            ]
        ]
    },
    {
        "id": "33ac7daee998dcb9",
        "type": "comment",
        "z": "6e52c1301b78909b",
        "name": "Вычисление производиетльности",
        "info": "",
        "x": 180,
        "y": 560,
        "wires": []
    },
    {
        "id": "92746cdeb1b34e60",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Вычисление производительности",
        "func": "const values = global.get('values')\nconst arrays = context.get('perfArrays')\n\nObject.entries(values).forEach(([id, {value}])=>{\n    arrays.add(id, value)\n    values[id].performance = arrays.getPerformance(id)\n})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Добавленный здесь код будет исполняться\n// однократно при развертывании узла.\n\nclass PerformancefArrays{\n    #arrays = {}\n    getPerformance(id){\n        if (id in this.#arrays){\n            const arr = this.#arrays[id]\n            if (arr.length <= 1) return 0\n            const diff = arr.at(-1) - arr.at(0)\n            if (diff < 0) return null\n            return Math.round((60 * diff) / ((arr.length - 1) * 5))\n        }\n        return null\n    }\n    add(id, value) {\n        if(!(id in this.#arrays))\n        this.#arrays[id] = []\n\n        this.#arrays[id].push(value)\n\n        if (this.#arrays[id].length > 13)\n        this.#arrays[id].shift()\n    }\n}\n\ncontext.set('perfArrays', new PerformancefArrays())",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 600,
        "wires": []
    },
    {
        "id": "7ae2a0fe2e84abcf",
        "type": "debug",
        "z": "6e52c1301b78909b",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "59ff2a1.fa600d4",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/:name",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "78ec0b97e374799a"
            ]
        ]
    },
    {
        "id": "bcf0258362e4a423",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 760,
        "y": 120,
        "wires": [
            [
                "6b4dcc60885175ea"
            ]
        ]
    },
    {
        "id": "6b4dcc60885175ea",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Преобразование ответа",
        "func": "for (const device of msg.payload) {\n    device.IsRequested = !!device.IsRequested.readInt8(0)\n}\nglobal.set('devices', msg.payload)\n\n\nmsg.headers = {\n    'content-type': 'application/json'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 120,
        "wires": [
            [
                "266c286f.d993d8"
            ]
        ]
    },
    {
        "id": "78ec0b97e374799a",
        "type": "switch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "property": "req.params.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "settings",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "devices",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "c44517cb4f2c3564"
            ],
            [
                "727937e9065df465"
            ],
            [
                "166f9b1d8a6ad43d"
            ]
        ]
    },
    {
        "id": "727937e9065df465",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM ModbusCounters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "bcf0258362e4a423"
            ]
        ]
    },
    {
        "id": "166f9b1d8a6ad43d",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 500,
        "y": 160,
        "wires": []
    },
    {
        "id": "2f4eeba7407ba9c6",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/devices",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "87122c7414d8fa7a"
            ]
        ]
    },
    {
        "id": "b52cfd3ed1fda7d7",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "ec8f52e7e0ea5fb6"
            ]
        ]
    },
    {
        "id": "87122c7414d8fa7a",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const newDevice = msg.req.body\n\nmsg.payload = newDevice\n\nmsg.topic = `INSERT INTO ModbusCounters (ModbusID, Name, IsRequested, ValueRegAdr, ResetRegAdr, Screen, StagePlan)\nVALUES(:ModbusID, :Name, CONV(:IsRequested, 2, 10) + 0, :ValueRegAdr, :ResetRegAdr, :Screen, :StagePlan);`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "b52cfd3ed1fda7d7"
            ]
        ]
    },
    {
        "id": "9bd0282ad6e263bd",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 280,
        "wires": []
    },
    {
        "id": "12993fa5c56d5556",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b52cfd3ed1fda7d7",
            "bcf0258362e4a423"
        ],
        "uncaught": false,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "90f55393f1d0d837"
            ]
        ]
    },
    {
        "id": "90f55393f1d0d837",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 200,
        "wires": [
            [
                "9bd0282ad6e263bd"
            ]
        ]
    },
    {
        "id": "ec8f52e7e0ea5fb6",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "201",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "9bd0282ad6e263bd",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "3b36fa04cce40f0c",
        "type": "link out",
        "z": "f8267d55bb8665c3",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "231fb27999873a06"
        ],
        "x": 1195,
        "y": 360,
        "wires": []
    },
    {
        "id": "920457f91dd9615a",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/device/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "81cb7dac5b5a9ffd"
            ]
        ]
    },
    {
        "id": "b043d5e44e6b72db",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 740,
        "y": 440,
        "wires": [
            [
                "310deaa39557bf34"
            ]
        ]
    },
    {
        "id": "7bebb1b21f450111",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 440,
        "wires": []
    },
    {
        "id": "ab743cbfaef8131c",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b043d5e44e6b72db"
        ],
        "uncaught": false,
        "x": 740,
        "y": 500,
        "wires": [
            [
                "5d611621b61a9cb7"
            ]
        ]
    },
    {
        "id": "5d611621b61a9cb7",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 500,
        "wires": [
            [
                "7bebb1b21f450111"
            ]
        ]
    },
    {
        "id": "310deaa39557bf34",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "204",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 440,
        "wires": [
            [
                "7bebb1b21f450111",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "81cb7dac5b5a9ffd",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "\nmsg.payload = { id: msg.req.params.id}\n\n\nmsg.topic = `DELETE FROM ModbusCounters WHERE((ModbusID = :id));`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 440,
        "wires": [
            [
                "b043d5e44e6b72db"
            ]
        ]
    },
    {
        "id": "5bebad459fee16cf",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/device/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "74af5832dac025a4"
            ]
        ]
    },
    {
        "id": "b43dd66cf14e1b5c",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 740,
        "y": 600,
        "wires": [
            [
                "9d86644e1c7da117"
            ]
        ]
    },
    {
        "id": "6281093da9b619cb",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 600,
        "wires": []
    },
    {
        "id": "938ae3a063fa7cb6",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b43dd66cf14e1b5c"
        ],
        "uncaught": false,
        "x": 740,
        "y": 660,
        "wires": [
            [
                "7da93835884595ae"
            ]
        ]
    },
    {
        "id": "7da93835884595ae",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 660,
        "wires": [
            [
                "6281093da9b619cb"
            ]
        ]
    },
    {
        "id": "74af5832dac025a4",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const newDevice = msg.req.body\n\nconst oldId = msg.req.params.id\n\n\nif (!global.get('devices').find(el => el.ModbusID == oldId)) return [undefined, msg]\n\nconst newParams = []\n\nfor (let prop in newDevice) {\n    if (prop === 'IsRequested') newParams.push(`${prop} = CONV(${newDevice[prop]}, 2, 10) + 0`)\n    else if (newDevice[prop] === null) newParams.push(`${prop} = null`)\n    else newParams.push(`${prop} = '${newDevice[prop]}'`)\n}\n\nmsg.topic = `UPDATE ModbusCounters SET ${newParams.join(\", \")} WHERE ModbusID = ${oldId}`\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "b43dd66cf14e1b5c",
                "26bbfd703ad12e58"
            ],
            [
                "87122c7414d8fa7a"
            ]
        ]
    },
    {
        "id": "9d86644e1c7da117",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 600,
        "wires": [
            [
                "6281093da9b619cb",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "c44517cb4f2c3564",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "get настройки",
        "func": "const keys = global.keys('file');\n\nconst settings = {}\n\nkeys.forEach(el=>{\n    settings[el] = global.get(el, 'file')\n})\n\nmsg.payload = settings\n\nmsg.headers = {\n    'content-type': 'application/json'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 60,
        "wires": [
            [
                "266c286f.d993d8"
            ]
        ]
    },
    {
        "id": "22161a7cf61e8398",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/settings",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "c0cd52030be91ae7"
            ]
        ]
    },
    {
        "id": "4223c9348cacbd7a",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "e840a91355fc5a0b",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "c0cd52030be91ae7"
        ],
        "uncaught": false,
        "x": 740,
        "y": 840,
        "wires": [
            [
                "7067cd22fb18ebe1"
            ]
        ]
    },
    {
        "id": "7067cd22fb18ebe1",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 840,
        "wires": [
            [
                "4223c9348cacbd7a",
                "395fd8f5c69c18fa"
            ]
        ]
    },
    {
        "id": "c0cd52030be91ae7",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const upSettings = Object.entries(msg.payload)\nconst oldSettings = global.keys('file')\n\nconst updated = {}\n\nupSettings.forEach(([key, newValue]) => {\n   if (oldSettings.includes(key) && global.get(key, 'file') !== newValue) {\n       global.set(key, newValue, 'file')\n       updated[key] = newValue\n   } else {\n       throw new Error(`Такого свойства несуществует: ${key}`)\n       }\n})\n\n\nmsg.payload = updated\n\nmsg.headers = {\n    'content-type': 'application/json'\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 780,
        "wires": [
            [
                "2273afe464be4bf1",
                "ee6d516c7f4b70fa"
            ]
        ]
    },
    {
        "id": "2273afe464be4bf1",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 780,
        "wires": [
            [
                "4223c9348cacbd7a"
            ]
        ]
    },
    {
        "id": "ee6d516c7f4b70fa",
        "type": "switch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "MODBUS_TCP_IP",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "STAGE_TIME",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 900,
        "wires": [
            [
                "22e0cbeb7a386cfd"
            ],
            [
                "a2fa98132ae64af3"
            ]
        ]
    },
    {
        "id": "22e0cbeb7a386cfd",
        "type": "link out",
        "z": "f8267d55bb8665c3",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "61aced3fbb77aa02"
        ],
        "x": 895,
        "y": 880,
        "wires": []
    },
    {
        "id": "a2fa98132ae64af3",
        "type": "link out",
        "z": "f8267d55bb8665c3",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "54b5bf7510091755"
        ],
        "x": 895,
        "y": 920,
        "wires": []
    },
    {
        "id": "26bbfd703ad12e58",
        "type": "debug",
        "z": "f8267d55bb8665c3",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "094947a94e5326c9",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/password",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1000,
        "wires": [
            [
                "dbce9f3f09957a4d",
                "9accb1e518daf1e5"
            ]
        ]
    },
    {
        "id": "dbce9f3f09957a4d",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const rightPassword = global.get('settingsPagePassword', 'file') \nconst reqBody = msg.req.body\n\nif ('password' in reqBody)\nnode.warn(reqBody.password);\n\nmsg.statusCode = (reqBody.password === rightPassword) ? 200 : 403\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1000,
        "wires": [
            [
                "43564ed009568e3b"
            ]
        ]
    },
    {
        "id": "9accb1e518daf1e5",
        "type": "debug",
        "z": "f8267d55bb8665c3",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 940,
        "wires": []
    },
    {
        "id": "266c286f.d993d8",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1240,
        "y": 120,
        "wires": []
    },
    {
        "id": "43564ed009568e3b",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1000,
        "wires": []
    },
    {
        "id": "395fd8f5c69c18fa",
        "type": "debug",
        "z": "f8267d55bb8665c3",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 880,
        "wires": []
    },
    {
        "id": "39dd64a2.77696c",
        "type": "inject",
        "z": "dc35f1f13fade75e",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "af7d7058.5db5c"
            ]
        ]
    },
    {
        "id": "1e186cfcf1942757",
        "type": "mysql",
        "z": "dc35f1f13fade75e",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 680,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "08600ded3b72ae71",
        "type": "template",
        "z": "dc35f1f13fade75e",
        "name": "",
        "field": "topic",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SET NAMES utf8mb4;\n\nCREATE TABLE IF NOT EXISTS `ModbusCounters` (\n  `ModbusID` tinyint unsigned NOT NULL COMMENT 'Id модбас устройства',\n  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'Отображаемое имя',\n  `IsRequested` bit(1) NOT NULL COMMENT 'Опрашивается или нет',\n  `ValueRegAdr` smallint unsigned NOT NULL DEFAULT '1003' COMMENT 'Адрес регистра текущего значения',\n  `ResetRegAdr` smallint unsigned NOT NULL DEFAULT '1' COMMENT 'Адрес Coil сброса',\n  `StagePlan` mediumint unsigned NULL COMMENT 'План на смену',\n  `Screen` tinyint unsigned NOT NULL COMMENT 'Экран для отображения',\n  PRIMARY KEY (`ModbusID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nCREATE TABLE IF NOT EXISTS `ArchiveData` (\n  `id` bigint unsigned NOT NULL AUTO_INCREMENT,\n  `dateTime` datetime NOT NULL,\n  `modbusId` tinyint unsigned NOT NULL,\n  `name` varchar(50) NOT NULL,\n  `stage` char(1) DEFAULT '',\n  `absValue` mediumint unsigned NOT NULL,\n  `plan` mediumint unsigned DEFAULT NULL,\n  `value` mediumint unsigned DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;",
        "output": "str",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "1e186cfcf1942757"
            ]
        ]
    },
    {
        "id": "c05fa34c6a57ba21",
        "type": "inject",
        "z": "dc35f1f13fade75e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "08600ded3b72ae71"
            ]
        ]
    },
    {
        "id": "92c4456dc21a5d90",
        "type": "comment",
        "z": "dc35f1f13fade75e",
        "name": "Создание таблиц",
        "info": "",
        "x": 190,
        "y": 260,
        "wires": []
    },
    {
        "id": "af7d7058.5db5c",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Load flow",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/flow/global",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "116be983.0bdd06"
            ]
        ]
    },
    {
        "id": "116be983.0bdd06",
        "type": "function",
        "z": "dc35f1f13fade75e",
        "name": "Modify tcpout settings",
        "func": "// increment the connection port\n// of the tcp out node with id 20ce9864.df2028\n// increment is done on every input of inject\n// the flowid is set in the topic of the inject \n// node\n\nconst configCopy = JSON.parse(JSON.stringify(msg.payload.configs));\n\nconst dataBaseId = '608ff9c050d10945';\n\nconfigCopy.forEach(function(el) {\n    if (el.id === dataBaseId) {\n        el.host = env.get(\"MYSQL_IP\")\n    }\n});\n\nif (JSON.stringify(msg.payload.configs) === JSON.stringify(configCopy)) return\n\nmsg.payload.configs = configCopy\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Accept' : 'application/json'};\nmsg.url = \"http://127.0.0.1:1880/flow/global\"\nmsg.method =\"PUT\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 180,
        "wires": [
            [
                "c888e5aa.be7428"
            ]
        ]
    },
    {
        "id": "c888e5aa.be7428",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Save flow",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "15dfe187e0651e45",
        "type": "link in",
        "z": "dc35f1f13fade75e",
        "name": "link in 2",
        "links": [
            "c4b7301bcd14a36f"
        ],
        "x": 275,
        "y": 380,
        "wires": [
            [
                "08600ded3b72ae71"
            ]
        ]
    },
    {
        "id": "684e0fb75ab82082",
        "type": "cronplus",
        "z": "df21a5b106a947a5",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "timestamp",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */10 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 120,
        "wires": [
            [
                "27d187a9cf0609d3"
            ]
        ]
    },
    {
        "id": "ad83da4e41fbe487",
        "type": "function",
        "z": "df21a5b106a947a5",
        "name": "Сделать запись",
        "func": "const datetime = msg.payload\nconst devices = global.get('devices') || []\nconst skipedDevs = global.get('skipedDevs')\nconst values = global.get('values')\nconst stageProd = global.get('stageProduction', 'file') || {}\n\n\nconst stage = global.get('stages').getStage()\n\nconst query = devices\n    .filter(({ IsRequested, ModbusID }) => IsRequested && ModbusID in values)\n    .reduce((acc, el) => {\n        const id = el.ModbusID\n        const name = el.Name\n        const absValue = values[id]?.value || 0\n        let plan = el.StagePlan || null\n        let value = null\n\n        if (id in stageProd) {\n            const prod = stageProd[id]\n            value = absValue >= prod ? absValue - prod : absValue + 999999 - prod\n        }\n\n        acc.push(`INSERT INTO ArchiveData (datetime, modbusId, name, stage, absValue, plan, value) VALUES('${datetime}',${id},'${name}','${stage}',${absValue},${plan},${value});`)\n        return acc\n        },[]);\n\nif (query.length === 0) return\n\nmsg.topic = query.join('\\r\\n')\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "2dc1427a5f845305",
                "b90ca50d9c9f8717"
            ]
        ]
    },
    {
        "id": "873dda3a08df0990",
        "type": "moment",
        "z": "df21a5b106a947a5",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Yekaterinburg",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "ru-RU",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Yekaterinburg",
        "x": 680,
        "y": 120,
        "wires": [
            [
                "ad83da4e41fbe487"
            ]
        ]
    },
    {
        "id": "b90ca50d9c9f8717",
        "type": "mysql",
        "z": "df21a5b106a947a5",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 1180,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2dc1427a5f845305",
        "type": "debug",
        "z": "df21a5b106a947a5",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 60,
        "wires": []
    },
    {
        "id": "27d187a9cf0609d3",
        "type": "change",
        "z": "df21a5b106a947a5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "inTz",
                "pt": "msg",
                "to": "TZ",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "outTz",
                "pt": "msg",
                "to": "TZ",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 120,
        "wires": [
            [
                "873dda3a08df0990"
            ]
        ]
    },
    {
        "id": "516b11021417f278",
        "type": "inject",
        "z": "df21a5b106a947a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "27d187a9cf0609d3"
            ]
        ]
    },
    {
        "id": "df44bd15fd1035b1",
        "type": "moment",
        "z": "7e68559fb83a6c0a",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Yekaterinburg",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "D MMM HH:mm",
        "locale": "ru-RU",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Yekaterinburg",
        "x": 640,
        "y": 500,
        "wires": [
            [
                "35b45ec84dcfa0b5"
            ]
        ]
    },
    {
        "id": "666fcdacff7783af",
        "type": "inject",
        "z": "7e68559fb83a6c0a",
        "name": "Время сервера",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "inTz",
                "v": "TZ",
                "vt": "env"
            },
            {
                "p": "outTz",
                "v": "TZ",
                "vt": "env"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 500,
        "wires": [
            [
                "df44bd15fd1035b1"
            ]
        ]
    },
    {
        "id": "0ffb7b2d93f5ec64",
        "type": "websocket out",
        "z": "7e68559fb83a6c0a",
        "name": "",
        "server": "e0707ccdfb3f12e8",
        "client": "",
        "x": 1110,
        "y": 500,
        "wires": []
    },
    {
        "id": "35b45ec84dcfa0b5",
        "type": "function",
        "z": "7e68559fb83a6c0a",
        "name": "function 4",
        "func": "msg.payload = {\n    time: msg.payload,\n    stage: global.get('stages').getStage()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 500,
        "wires": [
            [
                "0ffb7b2d93f5ec64"
            ]
        ]
    },
    {
        "id": "e20e5f0e3c3c026b",
        "type": "function",
        "z": "7e68559fb83a6c0a",
        "name": "Смена - дальше",
        "func": "const stages = global.get('stages')\nstages.nextStage()\nglobal.set('nextStageIn', stages.getStageEndTime(), 'file')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "198c8cce5dcefc2f"
            ]
        ]
    },
    {
        "id": "2f1560f4455dfc50",
        "type": "inject",
        "z": "7e68559fb83a6c0a",
        "name": "Таймер дневной смены",
        "props": [],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "e20e5f0e3c3c026b"
            ]
        ]
    },
    {
        "id": "42586db8ab6bdb7a",
        "type": "inject",
        "z": "7e68559fb83a6c0a",
        "name": "Таймер ночной смены",
        "props": [],
        "repeat": "",
        "crontab": "00 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 400,
        "wires": [
            [
                "e20e5f0e3c3c026b"
            ]
        ]
    },
    {
        "id": "198c8cce5dcefc2f",
        "type": "function",
        "z": "7e68559fb83a6c0a",
        "name": "Запомнить значения",
        "func": "const stageProd = {}\nconst devices = global.get('devices') || []\nconst skipedDevs = global.get('skipedDevs')\nconst values = global.get('values')\n\n\ndevices.filter(({ IsRequested }) => IsRequested).forEach((el) => {\n    const id = el.ModbusID\n    if (id in values)    \n    stageProd[id]=values[id].value\n});\n\nglobal.set('stageProduction', stageProd, 'file')\n\n//node.warn(stageProd)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            []
        ]
    }
]