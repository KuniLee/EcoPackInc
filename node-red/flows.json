[
    {
        "id": "d8f388f98592d062",
        "type": "tab",
        "label": "Поток 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "dc35f1f13fade75e",
        "type": "tab",
        "label": "Поток 0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e52c1301b78909b",
        "type": "tab",
        "label": "Поток 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8dd5dc2.87841",
        "type": "modbus-client",
        "name": "modbusTCPserver",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "localhost",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "",
        "commandDelay": "1",
        "clientTimeout": "500",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "608ff9c050d10945",
        "type": "MySQLdatabase",
        "name": "mysql-db",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "DataBase",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f8eb90804d4934dd",
        "type": "websocket-listener",
        "path": "/ws/test",
        "wholemsg": "false"
    },
    {
        "id": "2baa9bc7.3878b4",
        "type": "modbus-read",
        "z": "d8f388f98592d062",
        "name": "Температура",
        "topic": "temp",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "1",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "b8dd5dc2.87841",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 210,
        "y": 360,
        "wires": [
            [
                "5ecc1bd2af1ac89d"
            ],
            []
        ]
    },
    {
        "id": "b376694bf4e68cde",
        "type": "mysql",
        "z": "d8f388f98592d062",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 1180,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5ecc1bd2af1ac89d",
        "type": "range",
        "z": "d8f388f98592d062",
        "minin": "4000",
        "maxin": "20000",
        "minout": "-19.4",
        "maxout": "60.5",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 430,
        "y": 340,
        "wires": [
            [
                "c93207d7c1215c19"
            ]
        ]
    },
    {
        "id": "c93207d7c1215c19",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "",
        "func": "let [date, time] = new Date().toLocaleString('ru-RU').split(', ')\ndate = date.split('.').reverse().join('-')\n\nmsg.payload = [`${date} ${time}`, +msg.payload.toFixed(1)]\nmsg.topic = \"INSERT INTO test VALUES (?, ?);\"\n\nconst msg1 = {\n    payload: {\n        temp: msg.payload[1]\n        }\n}\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "c31b619b9f6d95a4",
                "6a3079b24b200196"
            ],
            [
                "a72bca4b2ccb6e50"
            ]
        ]
    },
    {
        "id": "a72bca4b2ccb6e50",
        "type": "websocket out",
        "z": "d8f388f98592d062",
        "name": "",
        "server": "f8eb90804d4934dd",
        "client": "",
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "c31b619b9f6d95a4",
        "type": "delay",
        "z": "d8f388f98592d062",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 970,
        "y": 340,
        "wires": [
            [
                "b376694bf4e68cde"
            ]
        ]
    },
    {
        "id": "6a3079b24b200196",
        "type": "debug",
        "z": "d8f388f98592d062",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 500,
        "wires": []
    },
    {
        "id": "39dd64a2.77696c",
        "type": "inject",
        "z": "dc35f1f13fade75e",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "af7d7058.5db5c"
            ]
        ]
    },
    {
        "id": "af7d7058.5db5c",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Load flow",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/flow/global",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "116be983.0bdd06",
                "0e85931f841c50a9"
            ]
        ]
    },
    {
        "id": "116be983.0bdd06",
        "type": "function",
        "z": "dc35f1f13fade75e",
        "name": "Modify tcpout settings",
        "func": "// increment the connection port\n// of the tcp out node with id 20ce9864.df2028\n// increment is done on every input of inject\n// the flowid is set in the topic of the inject \n// node\n\nconst configCopy = JSON.parse(JSON.stringify(msg.payload.configs));\n\nconst modbusClientId = 'b8dd5dc2.87841';\nconst dataBaseId = '608ff9c050d10945';\n\nconfigCopy.forEach(function(el) {\n    // if (el.id === modbusClientId) {\n    //     el.tcpHost = env.get(\"MODBUS_TCP_IP\")\n    // }\n    if (el.id === dataBaseId) {\n        el.host = env.get(\"MYSQL_IP\")\n    }\n});\n\nif (JSON.stringify(msg.payload.configs) === JSON.stringify(configCopy)) return\n\nmsg.payload.configs = configCopy\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Accept' : 'application/json'};\nmsg.url = \"http://127.0.0.1:1880/flow/global\"\nmsg.method =\"PUT\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "c888e5aa.be7428",
                "0e85931f841c50a9"
            ]
        ]
    },
    {
        "id": "c888e5aa.be7428",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Save flow",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0e85931f841c50a9",
        "type": "debug",
        "z": "dc35f1f13fade75e",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 360,
        "wires": []
    },
    {
        "id": "5c7d0c636d0abba8",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Поменять местами байты",
        "func": "const buf = msg.payload.buffer.reverse()\n\nfor (let i = 0; i < buf.length; i=i+2) {\n    [buf[i], buf[i + 1]] = [buf[i+1], buf[i]];\n}\n\nmsg.payload = buf.readInt32BE(0)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 400,
        "wires": [
            [
                "61147e47a58a4407"
            ]
        ]
    },
    {
        "id": "301faa842db8fef8",
        "type": "modbus-flex-sequencer",
        "z": "6e52c1301b78909b",
        "name": "",
        "sequences": [
            {
                "name": "Counter",
                "unitid": "1",
                "fc": "FC4",
                "address": "1001",
                "quantity": "2"
            }
        ],
        "server": "b8dd5dc2.87841",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 540,
        "y": 400,
        "wires": [
            [],
            [
                "5c7d0c636d0abba8"
            ]
        ]
    },
    {
        "id": "c7f2674f6378e416",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "fb09af9ead3704ba"
            ]
        ]
    },
    {
        "id": "fb09af9ead3704ba",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 1",
        "func": "const devices = flow.get('devices')\n\nconst skipedDevs = flow.get('skipedDevs')\n\n\nconst requestedDevs = devices.filter(({ IsRequested, ModbusID }) => IsRequested && !skipedDevs.has(ModbusID))\n\nmsg.sequences = requestedDevs.map(el=>({\n    name: el.Name,\n    fc: 4,\n    address: el.ValueRegAdr,\n    unitid: el.ModbusID,\n    quantity: 2,    \n}))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            [
                "301faa842db8fef8"
            ]
        ]
    },
    {
        "id": "accc94a8e437d04e",
        "type": "modbus-flex-connector",
        "z": "6e52c1301b78909b",
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "b8dd5dc2.87841",
        "x": 710,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "cd9b0f3aa0616ee9",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "2fb2560dc6144677",
                "0f6c5a1036729372"
            ]
        ]
    },
    {
        "id": "2fb2560dc6144677",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Конфиг Модбас",
        "func": "msg.payload = {\n    connectorType: \"TCP\",\n   //tcpHost: env.get(\"MODBUS_TCP_IP\"),\n    tcpHost: '10.5.66.101',\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "accc94a8e437d04e"
            ]
        ]
    },
    {
        "id": "f1a39dbdacbb6d43",
        "type": "mysql",
        "z": "6e52c1301b78909b",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "0ebd02be01c41393"
            ]
        ]
    },
    {
        "id": "4db21af8c667f2c9",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.1",
        "topic": "SELECT * FROM ModbusCounters",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "f1a39dbdacbb6d43"
            ]
        ]
    },
    {
        "id": "0ebd02be01c41393",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Преобразование ответа",
        "func": "for (const device of msg.payload) {\n    device.IsRequested = !!device.IsRequested.readInt8(0)\n}\nflow.set('devices', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "61147e47a58a4407",
        "type": "debug",
        "z": "6e52c1301b78909b",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "3ff5677b1c510bec",
        "type": "catch",
        "z": "6e52c1301b78909b",
        "name": "Ошибки Modbus",
        "scope": [
            "301faa842db8fef8"
        ],
        "uncaught": false,
        "x": 280,
        "y": 540,
        "wires": [
            [
                "1d5aad3c74b2c0d4"
            ]
        ]
    },
    {
        "id": "1d5aad3c74b2c0d4",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 2",
        "func": "const errCtr = flow.get('errorsCounter')\n\nconst errId = msg.payload.unitid\n\nconst now = Date.now()\n\n\nif (errCtr[errId] && now - errCtr[errId].lastTime  < 10000){\n    errCtr[errId].counter++\n    errCtr[errId].lastTime = Date.now()\n} else errCtr[errId] = { counter: 1, lastTime: now }\n\n\nif (errCtr[errId].counter >= 3) {\n    const skipedDevs = flow.get('skipedDevs')\n    skipedDevs.add(errId)\n    delete errCtr[errId]\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 540,
        "wires": []
    },
    {
        "id": "0f6c5a1036729372",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Инициализация контекста",
        "func": "flow.set('errorsCounter', {})\nflow.set('skipedDevs', new Set())\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": []
    }
]