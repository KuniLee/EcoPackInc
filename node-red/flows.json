[
    {
        "id": "d8f388f98592d062",
        "type": "tab",
        "label": "Инициализация",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e52c1301b78909b",
        "type": "tab",
        "label": "Modbus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8267d55bb8665c3",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc35f1f13fade75e",
        "type": "tab",
        "label": "Поток 0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8dd5dc2.87841",
        "type": "modbus-client",
        "name": "modbusTCPserver",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "localhost",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "",
        "commandDelay": "1",
        "clientTimeout": "500",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "608ff9c050d10945",
        "type": "MySQLdatabase",
        "name": "mysql-db",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "DataBase",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f8eb90804d4934dd",
        "type": "websocket-listener",
        "path": "/ws/test",
        "wholemsg": "false"
    },
    {
        "id": "6bd0068ce09f7195",
        "type": "inject",
        "z": "d8f388f98592d062",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "17ad62f06497aae8"
            ]
        ]
    },
    {
        "id": "17ad62f06497aae8",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Инициализация Global",
        "func": "global.get('MODBUS_TCP_IP', 'file') || global.set('MODBUS_TCP_IP', '127.0.0.1', 'file')\nglobal.get('ATTEMPTS', 'file') || global.set('ATTEMPTS', 3, 'file')\nglobal.get('ERROR_TIME', 'file') || global.set('ERROR_TIME', 10000, 'file')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": []
    },
    {
        "id": "f1a39dbdacbb6d43",
        "type": "mysql",
        "z": "d8f388f98592d062",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "0ebd02be01c41393"
            ]
        ]
    },
    {
        "id": "0ebd02be01c41393",
        "type": "function",
        "z": "d8f388f98592d062",
        "name": "Преобразование ответа",
        "func": "for (const device of msg.payload) {\n    device.IsRequested = !!device.IsRequested.readInt8(0)\n}\nglobal.set('devices', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ef35339b1f3e7897",
        "type": "comment",
        "z": "d8f388f98592d062",
        "name": "Получение всех устройств из БД",
        "info": "",
        "x": 260,
        "y": 180,
        "wires": []
    },
    {
        "id": "231fb27999873a06",
        "type": "link in",
        "z": "d8f388f98592d062",
        "name": "init devices",
        "links": [
            "3b36fa04cce40f0c"
        ],
        "x": 215,
        "y": 340,
        "wires": [
            [
                "d43fee0fedd81d84"
            ]
        ]
    },
    {
        "id": "d43fee0fedd81d84",
        "type": "change",
        "z": "d8f388f98592d062",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM ModbusCounters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 260,
        "wires": [
            [
                "f1a39dbdacbb6d43"
            ]
        ]
    },
    {
        "id": "52fdc354548ab5dd",
        "type": "debug",
        "z": "d8f388f98592d062",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 440,
        "wires": []
    },
    {
        "id": "1bf80087749d8199",
        "type": "status",
        "z": "d8f388f98592d062",
        "name": "",
        "scope": [
            "f1a39dbdacbb6d43"
        ],
        "x": 60,
        "y": 260,
        "wires": [
            [
                "f846483f495661d8"
            ]
        ]
    },
    {
        "id": "f846483f495661d8",
        "type": "switch",
        "z": "d8f388f98592d062",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "d43fee0fedd81d84",
                "52fdc354548ab5dd"
            ]
        ]
    },
    {
        "id": "5c7d0c636d0abba8",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Поменять местами байты",
        "func": "const values = global.get('values')\n\nconst { modbusRequest: { unitid } } = msg\n\nconst buf = msg.payload.buffer.reverse()\n\n\nfor (let i = 0; i < buf.length; i=i+2) {\n    [buf[i], buf[i + 1]] = [buf[i+1], buf[i]];\n}\n\nvalues[unitid] = { value: buf.readInt32BE(0)}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "301faa842db8fef8",
        "type": "modbus-flex-sequencer",
        "z": "6e52c1301b78909b",
        "name": "",
        "sequences": [
            {
                "name": "Counter",
                "unitid": "1",
                "fc": "FC4",
                "address": "1001",
                "quantity": "2"
            }
        ],
        "server": "b8dd5dc2.87841",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 420,
        "y": 420,
        "wires": [
            [],
            [
                "5c7d0c636d0abba8"
            ]
        ]
    },
    {
        "id": "c7f2674f6378e416",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1.1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "fb09af9ead3704ba"
            ]
        ]
    },
    {
        "id": "fb09af9ead3704ba",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 1",
        "func": "const devices = global.get('devices') || []\n\nconst skipedDevs = flow.get('skipedDevs')\n\n\nconst requestedDevs = devices.filter(({ IsRequested, ModbusID }) => IsRequested && !skipedDevs.has(ModbusID))\n\nmsg.sequences = requestedDevs.map(el=>({\n    name: el.Name,\n    fc: 4,\n    address: el.ValueRegAdr,\n    unitid: el.ModbusID,\n    quantity: 2,    \n}))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "301faa842db8fef8"
            ]
        ]
    },
    {
        "id": "accc94a8e437d04e",
        "type": "modbus-flex-connector",
        "z": "6e52c1301b78909b",
        "name": "",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "b8dd5dc2.87841",
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cd9b0f3aa0616ee9",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "2fb2560dc6144677",
                "0f6c5a1036729372"
            ]
        ]
    },
    {
        "id": "2fb2560dc6144677",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Конфиг Модбас",
        "func": "msg.payload = {\n    connectorType: \"TCP\",\n    tcpHost: global.get('MODBUS_TCP_IP', 'file'),\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "accc94a8e437d04e"
            ]
        ]
    },
    {
        "id": "3ff5677b1c510bec",
        "type": "catch",
        "z": "6e52c1301b78909b",
        "name": "Ошибки Modbus",
        "scope": [
            "301faa842db8fef8"
        ],
        "uncaught": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "1d5aad3c74b2c0d4"
            ]
        ]
    },
    {
        "id": "1d5aad3c74b2c0d4",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 2",
        "func": "const errCtr = flow.get('errorsCounter')\n\nconst errId = msg.payload.unitid\n\nconst now = Date.now()\n\n\nif (errCtr[errId] && now - errCtr[errId].lastTime < global.get('ERROR_TIME', 'file')){\n    errCtr[errId].counter++\n    errCtr[errId].lastTime = Date.now()\n} else errCtr[errId] = { counter: 1, lastTime: now }\n\n\nif (errCtr[errId].counter >= global.get('ATTEMPTS', 'file')) {\n    const skipedDevs = flow.get('skipedDevs')\n    skipedDevs.add(errId)\n    delete errCtr[errId]\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "0f6c5a1036729372",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "Инициализация контекста",
        "func": "flow.set('errorsCounter', {})\nflow.set('skipedDevs', new Set())\nglobal.set('values', {})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": []
    },
    {
        "id": "6e138e93f1fec0cb",
        "type": "inject",
        "z": "6e52c1301b78909b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 660,
        "wires": [
            [
                "71976d13f1ada451"
            ]
        ]
    },
    {
        "id": "71976d13f1ada451",
        "type": "function",
        "z": "6e52c1301b78909b",
        "name": "function 3",
        "func": "const devices = global.get('devices') || []\nconst skipedDevs = flow.get('skipedDevs')\nconst values = global.get('values')\n\nconst package = []\n\n\ndevices.forEach(( el )=>{\n\n\n\n    const id = el.ModbusID\n    const title = el.Name\n    const screen = el.Screen\n    const value = values[id]?.value || null\n\n    if (!screen) return\n\n    let status = 'ok'\n\n    if (!el.IsRequested) status = 'disabled'\n    else if (skipedDevs.has(id)) status = 'error'\n\n    package.push({ id, title, screen, status, value })   \n\n});\n\nmsg.payload = package\n\nif (package.length) return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "fd9e7bdf516c2476"
            ]
        ]
    },
    {
        "id": "fd9e7bdf516c2476",
        "type": "link out",
        "z": "6e52c1301b78909b",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "1a9feb98b2b047d4"
        ],
        "x": 1205,
        "y": 720,
        "wires": []
    },
    {
        "id": "84cf37ea77d8825f",
        "type": "websocket out",
        "z": "f8267d55bb8665c3",
        "name": "",
        "server": "f8eb90804d4934dd",
        "client": "",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "1a9feb98b2b047d4",
        "type": "link in",
        "z": "f8267d55bb8665c3",
        "name": "link in 1",
        "links": [
            "fd9e7bdf516c2476"
        ],
        "x": 225,
        "y": 60,
        "wires": [
            [
                "84cf37ea77d8825f"
            ]
        ]
    },
    {
        "id": "59ff2a1.fa600d4",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/:name",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "78ec0b97e374799a"
            ]
        ]
    },
    {
        "id": "266c286f.d993d8",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 180,
        "wires": []
    },
    {
        "id": "bcf0258362e4a423",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "6b4dcc60885175ea"
            ]
        ]
    },
    {
        "id": "6b4dcc60885175ea",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Преобразование ответа",
        "func": "for (const device of msg.payload) {\n    device.IsRequested = !!device.IsRequested.readInt8(0)\n}\nglobal.set('devices', msg.payload)\n\n\nmsg.headers = {\n    'content-type': 'application/json'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "266c286f.d993d8"
            ]
        ]
    },
    {
        "id": "78ec0b97e374799a",
        "type": "switch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "property": "req.params.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "devices",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "727937e9065df465"
            ],
            [
                "166f9b1d8a6ad43d"
            ]
        ]
    },
    {
        "id": "727937e9065df465",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM ModbusCounters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 180,
        "wires": [
            [
                "bcf0258362e4a423"
            ]
        ]
    },
    {
        "id": "60dd932672c09fa1",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 800,
        "wires": [
            [
                "d06bee6a1422dc9e"
            ]
        ]
    },
    {
        "id": "166f9b1d8a6ad43d",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 460,
        "y": 220,
        "wires": []
    },
    {
        "id": "2f4eeba7407ba9c6",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/devices",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "87122c7414d8fa7a"
            ]
        ]
    },
    {
        "id": "b52cfd3ed1fda7d7",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 680,
        "y": 340,
        "wires": [
            [
                "ec8f52e7e0ea5fb6"
            ]
        ]
    },
    {
        "id": "87122c7414d8fa7a",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const newDevice = msg.req.body\n\nmsg.payload = newDevice\n\nmsg.topic = `INSERT INTO ModbusCounters (ModbusID, Name, IsRequested, ValueRegAdr, ResetRegAdr, Screen)\nVALUES(:ModbusID, :Name, CONV(:IsRequested, 2, 10) + 0, :ValueRegAdr, :ResetRegAdr, :Screen);`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "b52cfd3ed1fda7d7"
            ]
        ]
    },
    {
        "id": "9bd0282ad6e263bd",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 340,
        "wires": []
    },
    {
        "id": "12993fa5c56d5556",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b52cfd3ed1fda7d7",
            "bcf0258362e4a423"
        ],
        "uncaught": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "90f55393f1d0d837"
            ]
        ]
    },
    {
        "id": "90f55393f1d0d837",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 260,
        "wires": [
            [
                "9bd0282ad6e263bd"
            ]
        ]
    },
    {
        "id": "ec8f52e7e0ea5fb6",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "201",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 340,
        "wires": [
            [
                "9bd0282ad6e263bd",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "d06bee6a1422dc9e",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 320,
        "y": 800,
        "wires": []
    },
    {
        "id": "3b36fa04cce40f0c",
        "type": "link out",
        "z": "f8267d55bb8665c3",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "231fb27999873a06"
        ],
        "x": 1155,
        "y": 420,
        "wires": []
    },
    {
        "id": "920457f91dd9615a",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/device/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "81cb7dac5b5a9ffd"
            ]
        ]
    },
    {
        "id": "b043d5e44e6b72db",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 700,
        "y": 500,
        "wires": [
            [
                "310deaa39557bf34"
            ]
        ]
    },
    {
        "id": "7bebb1b21f450111",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "ab743cbfaef8131c",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b043d5e44e6b72db"
        ],
        "uncaught": false,
        "x": 700,
        "y": 560,
        "wires": [
            [
                "5d611621b61a9cb7"
            ]
        ]
    },
    {
        "id": "5d611621b61a9cb7",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 560,
        "wires": [
            [
                "7bebb1b21f450111"
            ]
        ]
    },
    {
        "id": "310deaa39557bf34",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "204",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 500,
        "wires": [
            [
                "7bebb1b21f450111",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "81cb7dac5b5a9ffd",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const newDevice = msg.req.body\n\nmsg.payload.id = msg.req.params.id\n\n\nmsg.topic = `DELETE FROM ModbusCounters WHERE((ModbusID = :id));`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "b043d5e44e6b72db"
            ]
        ]
    },
    {
        "id": "5bebad459fee16cf",
        "type": "http in",
        "z": "f8267d55bb8665c3",
        "name": "",
        "url": "/api/device/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "74af5832dac025a4"
            ]
        ]
    },
    {
        "id": "b43dd66cf14e1b5c",
        "type": "mysql",
        "z": "f8267d55bb8665c3",
        "mydb": "608ff9c050d10945",
        "name": "",
        "x": 700,
        "y": 660,
        "wires": [
            [
                "9d86644e1c7da117"
            ]
        ]
    },
    {
        "id": "6281093da9b619cb",
        "type": "http response",
        "z": "f8267d55bb8665c3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 660,
        "wires": []
    },
    {
        "id": "938ae3a063fa7cb6",
        "type": "catch",
        "z": "f8267d55bb8665c3",
        "name": "",
        "scope": [
            "b43dd66cf14e1b5c"
        ],
        "uncaught": false,
        "x": 700,
        "y": 720,
        "wires": [
            [
                "7da93835884595ae"
            ]
        ]
    },
    {
        "id": "7da93835884595ae",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 720,
        "wires": [
            [
                "6281093da9b619cb"
            ]
        ]
    },
    {
        "id": "74af5832dac025a4",
        "type": "function",
        "z": "f8267d55bb8665c3",
        "name": "Проверка",
        "func": "const newDevice = msg.req.body\n\nconst oldId = msg.req.params.id\n\n\nif (!global.get('devices').find(el => el.ModbusID == oldId)) return [undefined, msg]\n\nconst newParams = []\n\nfor (let prop in newDevice) {\n\n    if (prop === 'IsRequested') newParams.push(`${prop} = CONV(${newDevice[prop]}, 2, 10) + 0`)\n    else newParams.push(`${prop} = '${newDevice[prop]}'`)\n}\n\nmsg.topic = `UPDATE ModbusCounters SET ${newParams.join(\", \")} WHERE ModbusID = ${oldId}`\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "b43dd66cf14e1b5c"
            ],
            [
                "87122c7414d8fa7a"
            ]
        ]
    },
    {
        "id": "9d86644e1c7da117",
        "type": "change",
        "z": "f8267d55bb8665c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 660,
        "wires": [
            [
                "6281093da9b619cb",
                "3b36fa04cce40f0c"
            ]
        ]
    },
    {
        "id": "85651546faf9a34d",
        "type": "debug",
        "z": "f8267d55bb8665c3",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 760,
        "wires": []
    },
    {
        "id": "39dd64a2.77696c",
        "type": "inject",
        "z": "dc35f1f13fade75e",
        "name": "Starten",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "af7d7058.5db5c"
            ]
        ]
    },
    {
        "id": "af7d7058.5db5c",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Load flow",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/flow/global",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "116be983.0bdd06",
                "0e85931f841c50a9"
            ]
        ]
    },
    {
        "id": "116be983.0bdd06",
        "type": "function",
        "z": "dc35f1f13fade75e",
        "name": "Modify tcpout settings",
        "func": "// increment the connection port\n// of the tcp out node with id 20ce9864.df2028\n// increment is done on every input of inject\n// the flowid is set in the topic of the inject \n// node\n\nconst configCopy = JSON.parse(JSON.stringify(msg.payload.configs));\n\nconst modbusClientId = 'b8dd5dc2.87841';\nconst dataBaseId = '608ff9c050d10945';\n\nconfigCopy.forEach(function(el) {\n    // if (el.id === modbusClientId) {\n    //     el.tcpHost = env.get(\"MODBUS_TCP_IP\")\n    // }\n    if (el.id === dataBaseId) {\n        el.host = env.get(\"MYSQL_IP\")\n    }\n});\n\nif (JSON.stringify(msg.payload.configs) === JSON.stringify(configCopy)) return\n\nmsg.payload.configs = configCopy\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Accept' : 'application/json'};\nmsg.url = \"http://127.0.0.1:1880/flow/global\"\nmsg.method =\"PUT\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "c888e5aa.be7428",
                "0e85931f841c50a9"
            ]
        ]
    },
    {
        "id": "c888e5aa.be7428",
        "type": "http request",
        "z": "dc35f1f13fade75e",
        "name": "Save flow",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0e85931f841c50a9",
        "type": "debug",
        "z": "dc35f1f13fade75e",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 360,
        "wires": []
    }
]